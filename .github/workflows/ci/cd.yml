name: CI/CD for AWS Lambda

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag (e.g., v1.0.0)'
        required: true

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: your-ecr-repository-name
  LAMBDA_FUNCTION_NAME: your-lambda-function-name

jobs:

  ci:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Update version file
      run: echo ${{ github.event.inputs.image_tag }} > version.txt

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.event.inputs.image_tag }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  cd:
    name: Deploy to AWS Lambda
    runs-on: ubuntu-latest
    needs: ci

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Get image tag
      id: get_image_tag
      run: echo "::set-output name=image_tag::$(cat version.txt)"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Deploy or Update Lambda Function
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.get_image_tag.outputs.image_tag }}
      run: |
        # Check if the Lambda function already exists
        FUNCTION_EXISTS=$(aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} || echo "")

        if [ -z "$FUNCTION_EXISTS" ]; then
          # Create a new Lambda function
          aws lambda create-function \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --package-type Image \
            --code ImageUri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        else
          # Update the existing Lambda function
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        fi